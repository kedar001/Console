//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eDocsDN_Word_File_Operations.Process_Word_Document {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Process_Word_Document.ICalcService")]
    public interface ICalcService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Get_DateTime_With_Thread", ReplyAction="http://tempuri.org/ICalcService/Get_DateTime_With_ThreadResponse")]
        System.DateTime Get_DateTime_With_Thread();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Get_DateTime_With_Thread", ReplyAction="http://tempuri.org/ICalcService/Get_DateTime_With_ThreadResponse")]
        System.Threading.Tasks.Task<System.DateTime> Get_DateTime_With_ThreadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/CP_Process", ReplyAction="http://tempuri.org/ICalcService/CP_ProcessResponse")]
        bool CP_Process(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/CP_Process", ReplyAction="http://tempuri.org/ICalcService/CP_ProcessResponse")]
        System.Threading.Tasks.Task<bool> CP_ProcessAsync(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Process_Word_Document", ReplyAction="http://tempuri.org/ICalcService/Process_Word_DocumentResponse")]
        bool Process_Word_Document(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Process_Word_Document", ReplyAction="http://tempuri.org/ICalcService/Process_Word_DocumentResponse")]
        System.Threading.Tasks.Task<bool> Process_Word_DocumentAsync(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Update_Document_Properties", ReplyAction="http://tempuri.org/ICalcService/Update_Document_PropertiesResponse")]
        bool Update_Document_Properties(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Update_Document_Properties", ReplyAction="http://tempuri.org/ICalcService/Update_Document_PropertiesResponse")]
        System.Threading.Tasks.Task<bool> Update_Document_PropertiesAsync(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Convert_To_PDF", ReplyAction="http://tempuri.org/ICalcService/Convert_To_PDFResponse")]
        bool Convert_To_PDF(string szFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Convert_To_PDF", ReplyAction="http://tempuri.org/ICalcService/Convert_To_PDFResponse")]
        System.Threading.Tasks.Task<bool> Convert_To_PDFAsync(string szFilePath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcServiceChannel : eDocsDN_Word_File_Operations.Process_Word_Document.ICalcService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcServiceClient : System.ServiceModel.ClientBase<eDocsDN_Word_File_Operations.Process_Word_Document.ICalcService>, eDocsDN_Word_File_Operations.Process_Word_Document.ICalcService {
        
        public CalcServiceClient() {
        }
        
        public CalcServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.DateTime Get_DateTime_With_Thread() {
            return base.Channel.Get_DateTime_With_Thread();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> Get_DateTime_With_ThreadAsync() {
            return base.Channel.Get_DateTime_With_ThreadAsync();
        }
        
        public bool CP_Process(string szFilePath) {
            return base.Channel.CP_Process(szFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> CP_ProcessAsync(string szFilePath) {
            return base.Channel.CP_ProcessAsync(szFilePath);
        }
        
        public bool Process_Word_Document(string szFilePath) {
            return base.Channel.Process_Word_Document(szFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> Process_Word_DocumentAsync(string szFilePath) {
            return base.Channel.Process_Word_DocumentAsync(szFilePath);
        }
        
        public bool Update_Document_Properties(string szFilePath) {
            return base.Channel.Update_Document_Properties(szFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> Update_Document_PropertiesAsync(string szFilePath) {
            return base.Channel.Update_Document_PropertiesAsync(szFilePath);
        }
        
        public bool Convert_To_PDF(string szFilePath) {
            return base.Channel.Convert_To_PDF(szFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> Convert_To_PDFAsync(string szFilePath) {
            return base.Channel.Convert_To_PDFAsync(szFilePath);
        }
    }
}
